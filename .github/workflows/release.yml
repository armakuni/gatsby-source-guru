name: Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test
      - name: Run lint (if configured)
        run: npm run lint || echo "Lint not configured, skipping"
        continue-on-error: true

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      
      - name: Check if version changed
        id: version-check
        run: |
          # Get the current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Get the previous commit's version (if it exists)
          git checkout HEAD~1 -- package.json 2>/dev/null || echo "No previous package.json found"
          PREV_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
          
          # Restore current package.json
          git checkout HEAD -- package.json
          
          echo "Current version: $CURRENT_VERSION"
          echo "Previous version: $PREV_VERSION"
          
          if [ "$CURRENT_VERSION" != "$PREV_VERSION" ]; then
            echo "Version changed from $PREV_VERSION to $CURRENT_VERSION"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged, skipping release"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Run tests before release
        if: steps.version-check.outputs.should_release == 'true'
        run: npm test
      
      - name: Publish to NPM
        if: steps.version-check.outputs.should_release == 'true'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Create GitHub Release
        if: steps.version-check.outputs.should_release == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version-check.outputs.new_version }}
          release_name: Release v${{ steps.version-check.outputs.new_version }}
          body: |
            Automated release of version ${{ steps.version-check.outputs.new_version }}
            
            ## Changes
            See commit history for detailed changes.
          draft: false
          prerelease: false
      
      - name: Create Git Tag
        if: steps.version-check.outputs.should_release == 'true'
        run: |
          git tag v${{ steps.version-check.outputs.new_version }}
          git push origin v${{ steps.version-check.outputs.new_version }}